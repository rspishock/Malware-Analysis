#! /usr/bin/python
from os import chdir, makedirs, path

import argparse
import re
import sys
import time


def get_arguments():
    """Get user supplied arguments from terminal."""
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', dest='input', help='File to parse strings from.')
    parser.add_argument('-o', '--output', dest='output', help='File to write parsed strings to.')
    parser.add_argument('-d', '--descriptor', dest='descriptor', help='Malware descriptor.  Will be used to append '
                                                                      'regex outputs to')
    (options) = parser.parse_args()

    return options


# argument variables
options = get_arguments()
input_file = options.input
output_file = options.output
descriptor = options.descriptor

# user variables
path_count = 0
dll_count = 0
exe_count = 0
url_count = 0
ip_count = 0
crypto_count = 0
file_path_count = 0
cmd_count = 0

print('DISCLAIMER:  All infomration returned from this script should be considered at face value and as a potential jump point for analysis.')
print('Malware authors will often put code into their malware in an attempt to steer analysts away from the actual intent of their code.py.')
print('Upon completion of the script, a deeper analysis should be performed to determine whether the suspected code is in fact malware.')
time.sleep(15)

try:
    if path.exists(input_file):
        makedirs('Analysis files')
        chdir('Analysis files')

        # file to read from
        with open(input_file) as file_object:
            with open(f'{descriptor}.dll.txt', 'w') as output:
                output.write("Located .dll files:\n")
                for line in file_object:
                    # dll regex
                    dll_regex = re.compile(f'@?[a-zA-Z0-9-_]*\.dll')
                    file = dll_regex.search(line)

                    # write dll files to file_out.txt
                    if file:
                        dll_count += 1
                        print(f'\t{file.group(0)}')
                        output.write(f'\t{file.group(0)}\n')
                    else:
                        pass

                output.write(f'\n\nNumber of dll files found: {dll_count}.')

        with open(f'{descriptor}.exe.txt', 'w') as output:
            output.write("Located .exe files:\n")
            for line in file_object:
                # exe regex
                exe_regex = re.compile(f'@?[a-zA-Z0-9-_]*\.exe')
                file = exe_regex.search(line)

                # write exe files to file_out.txt
                if file:
                    exe_count += 1
                    print(f'\t{file.group(0)}')
                    output.write(f'\t{file.group(0)}\n')
                else:
                    pass

            output.write(f'\n\nNumber of exe files found: {exe_count}.')

        with open(f'{descriptor}.html.txt', 'w') as output:
            output.write("Located url calls:\n")
            for line in file_object:
                # url regex
                url_regex = re.compile(f'http://[www.]?[a-zA-Z0-9-_]*\.[com|org]')
                file = url_regex.search(line)

                # write url calls to file_out.txt
                if file:
                    url_count += 1
                    print(f'\t{file.group(0)}')
                    output.write(f'\t{file.group(0)}\n')
                else:
                    pass

            output.write(f'\n\nNumber of html calls found: {url_count}.')


        with open(f'{descriptor}.ip.txt', 'w') as output:
            output.write("Located url calls:\n")
            for line in file_object:
                # ip regex
                ip_regex = re.compile(f'^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$')
                file = ip_regex.search(line)

                # write url calls to file_out.txt
                if file:
                    ip_count += 1
                    print(f'\t{file.group(0)}')
                    output.write(f'\t{file.group(0)}\n')
                else:
                    pass

            output.write(f'\n\nNumber of IP addresses found: {ip_count}.')

        with open(f'{descriptor}.file_path.txt', 'w'):
            output.write('Located file paths:\n')
            for line in file_object:
                # path regex
                path_regex = re.compile(f'c:\\')

                if file:
                    file_path_count += 1
                    print(f'\t{file.group(0)}')
                    output.write(f'\t{file.group(0)}\n')
                else:
                    pass

            output.write(f'\n\nNumber of file paths found: {file_path_count}}.')
            output.write('This is just a preliminary scan, verify accuracy by performing manual review.')

        with open(f'{descriptor}.command.txt', 'w'):
            output.write('Windows command calls:\n')
            for line in file_object:
                # command regex
                cmd_regex = re.compile(f'cmd.exe')

                if file:
                    cmd_count += 1
                    print(f'\t{file.group(0)}')
                    output.write(f'\t{file.group(0)}\n')
                else:
                    pass

            output.write(f'\n\nNumber of Windows command calls found: {cmd_count}.')
            output.write('This is just a preliminary scan, verify accuracy by performing manual review.')

    else:
        print(f'File {input_file} does not exist.')
        print('Check filename and rerun script.')
        sys.exit()

except IOError:
    sys.exit
